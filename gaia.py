import pandas as pddef lag_str(date,lag):    annee=int(date[:4])+(int(date[4:])-lag)//12    mois=(int(date[4:])-lag)%12    if mois==0:        return str(annee-1)+'12'    elif mois<=9:        return str(annee)+'0'+str(mois)    else:        return str(annee)+str(mois)class Gaia():    def __init__(self,granting_path,stock_path):        self.vintages={'Vintage3M':3,'Vintage6M':6,'Vintage12M':12,'Vintage24M':24}        self.df_granting=pd.read_csv(granting_path,delimiter=';',decimal=',')        self.df_granting.rename(columns={'COUNTRY2':'COUNTRY',        'GRANTING_aaaamm':'DATE',        'Axe_perso':'SEGMENT',        'Sum(GRANTING_RISK_3M_MT)':'Risk3M',        'Sum(GRANTING_RISK_6M_MT)':'Risk6M',        'Sum(GRANTING_RISK_12M_MT)':'Risk12M',        'Sum(GRANTING_RISK_24M_MT)':'Risk24M',        'Sum(GRANTING_ACTIVE_3M_MT)':'Active3M',        'Sum(GRANTING_ACTIVE_6M_MT)':'Active6M',        'Sum(GRANTING_ACTIVE_12M_MT)':'Active12M',        'Sum(GRANTING_ACTIVE_24M_MT)':'Active24M',        'Sum(GRANTING_PROD_FI_MT)':'Production',        'Sum(GRANTING_FPD_MT)':'FPD'},inplace=True)        self.df_granting=self.df_granting[(self.df_granting['DATE']!='-')&(self.df_granting['DATE']!='')]                self.df_stock=pd.read_csv(stock_path,delimiter=';',decimal=',')        self.df_stock.rename(columns={'COUNTRY2':'COUNTRY',        'STOCK_aaaamm':'DATE',        'Axe_perso':'SEGMENT'}, inplace=True)    ##########################################    #####         Methodes Stock         #####    ##########################################    def compute_rr(self,df):        df.sort_values('DATE',ascending=True)    #Sommes des transferts au contentieux et pertes        for i in range(5):            df['TS'+str(i)]=df['v_TS_LS_R'+str(i)]+df['v_TS_LT_R'+str(i)]    #DÃ©callage pour le calcul R0R1        df[['R0R1_r0','R0R1_ts0']]=df[['v_OST_R0','TS0']].shift(1)    #Calcul R0R1        df['R0R1']=(df['v_OST_R1']+df['TS1']+df['R0R1_ts0'])/(df['R0R1_r0']+df['R0R1_ts0'])    #DÃ©callage pour le calcul R0R4        df[['R0R4_r0','R0R4_ts0']]=df[['v_OST_R0','TS0']].shift(4)        df['R0R4_ts1']=df['TS1'].shift(3)        df['R0R4_ts2']=df['TS2'].shift(2)        df[['R0R4_r3','R0R4_ts3']]=df[['v_OST_R3','TS3']].shift(1)    #Calcul R0R4        df['R0R4']=(df['v_OST_R4']+df['TS4']+df['R0R4_ts0']+df['R0R4_ts1']+df['R0R4_ts2']+df['R0R4_ts3'])/(df['R0R4_r0']+df['R0R4_ts0'])    #Calcul R2+        df['R2+']=(df['v_OST_R2']+df['v_OST_R3']+df['v_OST_R4'])/(df['v_OST_R1']+df['v_OST_R2']+df['v_OST_R3']+df['v_OST_R4'])        return df        def get_rr_by_country(self,country):        df=self.df_stock[self.df_stock['COUNTRY']==country]        df=df.groupby(['COUNTRY','DATE']).sum().reset_index()    #calculer les RR        df=self.compute_rr(df)        return df[['COUNTRY','DATE','R0R1','R0R4','R2+']]        def get_rr_by_segment(self,country,segment):        df=self.df_stock[(self.df_stock['COUNTRY']==country)&(self.df_stock['SEGMENT']==segment)]        df=df.groupby(['COUNTRY','DATE','SEGMENT']).sum().reset_index()    #calculer les RR        df=self.compute_rr(df)        return df[['COUNTRY','DATE','SEGMENT','R0R1','R0R4','R2+']]    def get_os_by_country(self,country):        df=self.df_stock[self.df_stock['COUNTRY']==country]        df=df.groupby(['COUNTRY','DATE']).sum().reset_index()        df['Outstanding']=df['v_OST_R0']+df['v_OST_R1']+df['v_OST_R2']+df['v_OST_R3']+df['v_OST_R4']        return df[['COUNTRY','DATE','Outstanding']]        """#######################################    #####        Methodes Granting       #####    #######################################"""        def vintage_groupby_country(self,df,lag):        df=df.groupby(['COUNTRY','DATE']).sum().reset_index()        df['Vintage'+str(lag)+'M']=df['Risk'+str(lag)+'M']/df['Active'+str(lag)+'M']        df.sort_values('DATE',ascending=True)        df['Vintage'+str(lag)+'M']=df['Vintage'+str(lag)+'M'].shift(-lag)        return df[['COUNTRY','DATE','Vintage'+str(lag)+'M']]        def vintage_groupby_segment(self,df,lag):        df=df.groupby(['COUNTRY','DATE','SEGMENT']).sum().reset_index()        df['Vintage'+str(lag)+'M']=df['Risk'+str(lag)+'M']/df['Active'+str(lag)+'M']        df.sort_values('DATE',ascending=True)        df['Vintage'+str(lag)+'M']=df['Vintage'+str(lag)+'M'].shift(-lag)        return df[['COUNTRY','DATE','SEGMENT','Vintage'+str(lag)+'M']]        def get_vintage_by_country(self,country):        df_vintages={}        vintage = self.df_granting[self.df_granting['COUNTRY']==country]        for key,val in self.vintages.items():            df_vintages[key] = self.vintage_groupby_country(vintage,val)        return df_vintages    def get_production_by_country(self,country):        df_production = self.df_granting[self.df_granting['COUNTRY']==country]        df_production=df_production.groupby(['COUNTRY','DATE']).sum().reset_index()        return df_production[['COUNTRY','DATE','Production','FPD']]        def get_vintage_by_segment(self,country,segment):        df_vintages={}        vintage = self.df_granting[(self.df_granting['COUNTRY']==country) & (self.df_granting['SEGMENT']==segment)]        for key,val in self.vintages.items():            df_vintages[key]=self.vintage_groupby_segment(vintage,val)        return df_vintages    def get_production_by_segment(self,country,segment):        df_production = self.df_granting[(self.df_granting['COUNTRY']==country)&(self.df_granting['SEGMENT']==segment)]        df_production=df_production.groupby(['COUNTRY','DATE','SEGMENT']).sum().reset_index()        return df_production[['COUNTRY','DATE','SEGMENT','Production','FPD']]if __name__ == '__main__':    db=Gaia('granting.csv','stock.csv')    a=db.get_vintage_by_country('PPOR')